#!/usr/bin/env python3
"""
Reset Energy Counter Tool for PZEM-004T Sensors
===============================================

Tool ƒë·ªÉ reset b·ªô ƒë·∫øm nƒÉng l∆∞·ª£ng cho c√°c c·∫£m bi·∫øn PZEM-004T.
H·ªó tr·ª£ reset cho nhi·ªÅu thi·∫øt b·ªã c√πng l√∫c v·ªõi x√°c nh·∫≠n ng∆∞·ªùi d√πng.

T√≠nh nƒÉng:
- T·ª± ƒë·ªông ph√°t hi·ªán c√°c thi·∫øt b·ªã PZEM-004T
- Reset b·ªô ƒë·∫øm nƒÉng l∆∞·ª£ng cho t·ª´ng thi·∫øt b·ªã
- X√°c nh·∫≠n tr∆∞·ªõc khi reset
- Hi·ªÉn th·ªã tr·∫°ng th√°i reset
- H·ªó tr·ª£ nhi·ªÅu lo·∫°i USB-to-Serial adapter
"""

import serial
import serial.tools.list_ports
import time
from pzem import PZEM004T

def find_pzem_ports():
    """
    Qu√©t v√† tr·∫£ v·ªÅ danh s√°ch c√°c c·ªïng n·ªëi ti·∫øp c√≥ v·∫ª nh∆∞ ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi
    c·∫£m bi·∫øn PZEM-004T th√¥ng qua b·ªô chuy·ªÉn ƒë·ªïi USB-to-Serial.
    """
    pzem_ports = []
    ports = serial.tools.list_ports.comports()
    
    for port in ports:
        # Ki·ªÉm tra kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng v√† t·ªïng qu√°t h∆°n.
        desc_lower = port.description.lower() if port.description else ""
        device_lower = port.device.lower()
        hwid_lower = port.hwid.lower() if port.hwid else ""

        # H·ªó tr·ª£ nhi·ªÅu lo·∫°i USB-to-Serial adapter
        keywords = ["pl2303", "usb-serial", "usb serial", "ch340", "cp210", "ftdi"]
        
        if any(keyword in desc_lower for keyword in keywords) or \
           any(keyword in device_lower for keyword in keywords) or \
           "vid:067b" in hwid_lower:  # Ki·ªÉm tra Prolific Vendor ID
            pzem_ports.append(port.device)
            
    return pzem_ports

def get_device_info(port, max_retries=2):
    """
    L·∫•y th√¥ng tin thi·∫øt b·ªã tr∆∞·ªõc khi reset
    
    Args:
        port (str): C·ªïng serial c·ªßa thi·∫øt b·ªã
        max_retries (int): S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
    
    Returns:
        dict or None: Th√¥ng tin thi·∫øt b·ªã ho·∫∑c None n·∫øu l·ªói
    """
    pzem = None
    
    for attempt in range(1, max_retries + 1):
        try:
            pzem = PZEM004T(port=port, timeout=3.0)
            
            # ƒê·ªçc th√¥ng tin thi·∫øt b·ªã
            measurements = pzem.get_all_measurements()
            address = pzem.get_address()
            
            if measurements:
                return {
                    'address': address,
                    'energy': measurements['energy'],
                    'power': measurements['power'],
                    'voltage': measurements['voltage'],
                    'current': measurements['current']
                }
            else:
                if attempt < max_retries:
                    print(f"‚ö†Ô∏è  L·∫ßn th·ª≠ {attempt} ƒë·ªçc th√¥ng tin th·∫•t b·∫°i, ƒëang th·ª≠ l·∫°i...")
                    time.sleep(1)
                else:
                    print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin t·ª´ {port} sau {max_retries} l·∫ßn th·ª≠")
                    return None
                    
        except Exception as e:
            if attempt < max_retries:
                print(f"‚ö†Ô∏è  L·∫ßn th·ª≠ {attempt} ƒë·ªçc th√¥ng tin th·∫•t b·∫°i ({e}), ƒëang th·ª≠ l·∫°i...")
                time.sleep(1)
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin t·ª´ {port} sau {max_retries} l·∫ßn th·ª≠: {e}")
                return None
        finally:
            if pzem:
                pzem.close()
                time.sleep(0.5)
    
    return None

def reset_pzem_energy(port, confirm=True, max_retries=3):
    """
    K·∫øt n·ªëi v·ªõi c·∫£m bi·∫øn PZEM tr√™n m·ªôt c·ªïng nh·∫•t ƒë·ªãnh v√† reset l·∫°i b·ªô ƒë·∫øm nƒÉng l∆∞·ª£ng c·ªßa n√≥.
    
    Args:
        port (str): C·ªïng serial c·ªßa thi·∫øt b·ªã
        confirm (bool): C√≥ y√™u c·∫ßu x√°c nh·∫≠n kh√¥ng
        max_retries (int): S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
    
    Returns:
        bool: True n·∫øu reset th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    pzem = None
    
    # L·∫•y th√¥ng tin thi·∫øt b·ªã tr∆∞·ªõc khi reset
    device_info = get_device_info(port)
    
    if device_info:
        print(f"\nTh√¥ng tin thi·∫øt b·ªã {port}:")
        print(f"  ƒê·ªãa ch·ªâ: {device_info['address']}")
        print(f"  NƒÉng l∆∞·ª£ng hi·ªán t·∫°i: {device_info['energy']:.3f} kWh")
        print(f"  C√¥ng su·∫•t: {device_info['power']:.1f} W")
        print(f"  ƒêi·ªán √°p: {device_info['voltage']:.1f} V")
        print(f"  D√≤ng ƒëi·ªán: {device_info['current']:.3f} A")
        
        if confirm:
            response = input(f"\nB·∫°n c√≥ ch·∫Øc mu·ªën reset b·ªô ƒë·∫øm nƒÉng l∆∞·ª£ng tr√™n {port}? (y/N): ")
            if response.lower() != 'y':
                print(f"B·ªè qua reset cho {port}")
                return False
    
    # Th·ª≠ reset v·ªõi retry mechanism m·ªõi (s·ª≠ d·ª•ng retry built-in trong th∆∞ vi·ªán)
    try:
        pzem = PZEM004T(port=port, timeout=3.0)  # TƒÉng timeout
        
        # S·ª≠ d·ª•ng retry mechanism built-in trong th∆∞ vi·ªán
        if pzem.reset_energy(max_retries=max_retries):
            print(f"‚úÖ ƒê√£ reset th√†nh c√¥ng b·ªô ƒë·∫øm nƒÉng l∆∞·ª£ng tr√™n {port}")
            
            # ƒê·ªçc l·∫°i th√¥ng tin sau khi reset
            time.sleep(2)  # TƒÉng delay ƒë·ªÉ thi·∫øt b·ªã ·ªïn ƒë·ªãnh
            new_measurements = pzem.get_all_measurements()
            if new_measurements:
                print(f"   NƒÉng l∆∞·ª£ng sau reset: {new_measurements['energy']:.3f} kWh")
            
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ reset b·ªô ƒë·∫øm nƒÉng l∆∞·ª£ng tr√™n {port}")
            return False
                
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c reset {port}: {e}")
        return False
    finally:
        if pzem:
            pzem.close()
            time.sleep(0.5)  # Delay gi·ªØa c√°c l·∫ßn th·ª≠
    
    return False

def reset_all_devices(confirm_each=True, confirm_all=True):
    """
    Reset t·∫•t c·∫£ thi·∫øt b·ªã PZEM ƒë∆∞·ª£c ph√°t hi·ªán
    
    Args:
        confirm_each (bool): X√°c nh·∫≠n cho t·ª´ng thi·∫øt b·ªã
        confirm_all (bool): X√°c nh·∫≠n tr∆∞·ªõc khi reset t·∫•t c·∫£
    """
    print("üîç ƒêang t√¨m ki·∫øm c·∫£m bi·∫øn PZEM-004T...")
    detected_ports = find_pzem_ports()
    
    if not detected_ports:
        print("‚ùå Kh√¥ng ph√°t hi·ªán th·∫•y thi·∫øt b·ªã PZEM n√†o.")
        print("üí° Vui l√≤ng ki·ªÉm tra:")
        print("   - K·∫øt n·ªëi USB-to-Serial adapter")
        print("   - Driver ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        print("   - Quy·ªÅn truy c·∫≠p c·ªïng serial")
        return
    
    print(f"‚úÖ ƒê√£ t√¨m th·∫•y {len(detected_ports)} thi·∫øt b·ªã PZEM: {detected_ports}")
    
    if confirm_all and len(detected_ports) > 1:
        print(f"\n‚ö†Ô∏è  B·∫°n s·∫Øp reset {len(detected_ports)} thi·∫øt b·ªã:")
        for i, port in enumerate(detected_ports, 1):
            print(f"   {i}. {port}")
        
        response = input(f"\nB·∫°n c√≥ ch·∫Øc mu·ªën reset t·∫•t c·∫£ {len(detected_ports)} thi·∫øt b·ªã? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå ƒê√£ h·ªßy reset t·∫•t c·∫£ thi·∫øt b·ªã.")
            return
    
    # Reset t·ª´ng thi·∫øt b·ªã
    success_count = 0
    failed_ports = []
    
    for i, port in enumerate(detected_ports, 1):
        print(f"\nüìä [{i}/{len(detected_ports)}] ƒêang x·ª≠ l√Ω thi·∫øt b·ªã {port}...")
        
        if reset_pzem_energy(port, confirm=confirm_each):
            success_count += 1
        else:
            failed_ports.append(port)
        
        time.sleep(1)  # TƒÉng delay gi·ªØa c√°c thi·∫øt b·ªã
    
    # T√≥m t·∫Øt k·∫øt qu·∫£
    print(f"\nüìã T√≥m t·∫Øt k·∫øt qu·∫£:")
    print(f"   T·ªïng thi·∫øt b·ªã: {len(detected_ports)}")
    print(f"   Reset th√†nh c√¥ng: {success_count}")
    print(f"   Reset th·∫•t b·∫°i: {len(detected_ports) - success_count}")
    
    # H·ªèi c√≥ mu·ªën th·ª≠ l·∫°i thi·∫øt b·ªã b·ªã l·ªói kh√¥ng
    if failed_ports:
        print(f"\n‚ö†Ô∏è  C√°c thi·∫øt b·ªã b·ªã l·ªói: {failed_ports}")
        print("üí° Nguy√™n nh√¢n c√≥ th·ªÉ l√†:")
        print("   - Nhi·ªÖu ƒëi·ªán t·ª´")
        print("   - K·∫øt n·ªëi loose")
        print("   - Thi·∫øt b·ªã ƒëang b·∫≠n")
        print("   - L·ªói CRC t·∫°m th·ªùi")
        
        response = input("B·∫°n c√≥ mu·ªën th·ª≠ reset l·∫°i c√°c thi·∫øt b·ªã b·ªã l·ªói? (y/N): ")
        if response.lower() == 'y':
            print("\nüîÑ Th·ª≠ reset l·∫°i c√°c thi·∫øt b·ªã b·ªã l·ªói...")
            for port in failed_ports:
                print(f"\nüìä ƒêang th·ª≠ l·∫°i thi·∫øt b·ªã {port}...")
                if reset_pzem_energy(port, confirm=False, max_retries=5):
                    success_count += 1
                    print(f"‚úÖ Th·ª≠ l·∫°i th√†nh c√¥ng cho {port}")
                else:
                    print(f"‚ùå Th·ª≠ l·∫°i th·∫•t b·∫°i cho {port}")
            
            print(f"\nüìã K·∫øt qu·∫£ cu·ªëi c√πng:")
            print(f"   T·ªïng thi·∫øt b·ªã: {len(detected_ports)}")
            print(f"   Reset th√†nh c√¥ng: {success_count}")
            print(f"   Reset th·∫•t b·∫°i: {len(detected_ports) - success_count}")

def main():
    """
    H√†m ch√≠nh v·ªõi menu t∆∞∆°ng t√°c
    """
    print("üîå PZEM-004T Energy Reset Tool")
    print("=" * 40)
    
    while True:
        print("\nüìã Menu:")
        print("1. Reset t·∫•t c·∫£ thi·∫øt b·ªã (c√≥ x√°c nh·∫≠n)")
        print("2. Reset t·∫•t c·∫£ thi·∫øt b·ªã (kh√¥ng x√°c nh·∫≠n)")
        print("3. Reset t·ª´ng thi·∫øt b·ªã (x√°c nh·∫≠n t·ª´ng c√°i)")
        print("4. Qu√©t l·∫°i thi·∫øt b·ªã")
        print("5. Tho√°t")
        
        try:
            choice = input("\nCh·ªçn t√πy ch·ªçn (1-5): ").strip()
            
            if choice == '1':
                reset_all_devices(confirm_each=True, confirm_all=True)
            elif choice == '2':
                reset_all_devices(confirm_each=False, confirm_all=True)
            elif choice == '3':
                reset_all_devices(confirm_each=True, confirm_all=False)
            elif choice == '4':
                detected_ports = find_pzem_ports()
                if detected_ports:
                    print(f"‚úÖ T√¨m th·∫•y {len(detected_ports)} thi·∫øt b·ªã: {detected_ports}")
                else:
                    print("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o.")
            elif choice == '5':
                print("üëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-5.")
                
        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")